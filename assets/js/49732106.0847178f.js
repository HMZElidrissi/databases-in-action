"use strict";(self.webpackChunkdatabases_in_action=self.webpackChunkdatabases_in_action||[]).push([[6681],{1994:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var s=o(4848),t=o(8453);const i={sidebar_position:2},l="Eloquent Relationships",a={id:"Laravel-Models/Eloquent-Relationships",title:"Eloquent Relationships",description:"Eloquent relationships define how different models are related to each other. They allow you to define relationships between models and retrieve related data easily. Eloquent provides several types of relationships, including one-to-one, one-to-many, many-to-one, many-to-many, and polymorphic relationships.",source:"@site/docs/Laravel-Models/Eloquent-Relationships.md",sourceDirName:"Laravel-Models",slug:"/Laravel-Models/Eloquent-Relationships",permalink:"/databases-in-action/docs/Laravel-Models/Eloquent-Relationships",draft:!1,unlisted:!1,editUrl:"https://github.com/HMZElidrissi/databases-in-action/blob/main/docs/Laravel-Models/Eloquent-Relationships.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Defining Models",permalink:"/databases-in-action/docs/Laravel-Models/Defining-Models"},next:{title:"Querying the Database with Eloquent",permalink:"/databases-in-action/docs/Laravel-Models/Querying-the-Database-with-Eloquent"}},r={},c=[{value:"<strong>Many-to-One Relationship</strong>",id:"many-to-one-relationship",level:2},{value:"<strong>Many-to-Many Relationship</strong>",id:"many-to-many-relationship",level:2},{value:"<strong>One-to-One Relationship</strong>",id:"one-to-one-relationship",level:2},{value:"<strong>Polymorphic Relationship</strong>",id:"polymorphic-relationship",level:2},{value:"Using the Relationship",id:"using-the-relationship",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"eloquent-relationships",children:"Eloquent Relationships"}),"\n",(0,s.jsx)(n.p,{children:"Eloquent relationships define how different models are related to each other. They allow you to define relationships between models and retrieve related data easily. Eloquent provides several types of relationships, including one-to-one, one-to-many, many-to-one, many-to-many, and polymorphic relationships."}),"\n",(0,s.jsx)(n.h2,{id:"many-to-one-relationship",children:(0,s.jsx)(n.strong,{children:"Many-to-One Relationship"})}),"\n",(0,s.jsx)(n.p,{children:"In a many-to-one relationship, multiple records from one model are associated with a single record in another model."}),"\n",(0,s.jsxs)(n.p,{children:["Example: A ",(0,s.jsx)(n.code,{children:"Comment"})," belongs to a ",(0,s.jsx)(n.code,{children:"Post"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class Post extends Model\n{\n    public function comments()\n    {\n        return $this->hasMany(Comment::class);\n    }\n}\n\nclass Comment extends Model\n{\n    public function post()\n    {\n        return $this->belongsTo(Post::class);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"many-to-many-relationship",children:(0,s.jsx)(n.strong,{children:"Many-to-Many Relationship"})}),"\n",(0,s.jsx)(n.p,{children:"In a many-to-many relationship, records from both models can have multiple connections to each other."}),"\n",(0,s.jsxs)(n.p,{children:["Example: A ",(0,s.jsx)(n.code,{children:"Student"})," can enroll in multiple ",(0,s.jsx)(n.code,{children:"Course"})," instances, and a ",(0,s.jsx)(n.code,{children:"Course"})," can have multiple enrolled ",(0,s.jsx)(n.code,{children:"Student"})," instances."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class Student extends Model\n{\n    public function courses()\n    {\n        return $this->belongsToMany(Course::class);\n    }\n}\n\nclass Course extends Model\n{\n    public function students()\n    {\n        return $this->belongsToMany(Student::class);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"one-to-one-relationship",children:(0,s.jsx)(n.strong,{children:"One-to-One Relationship"})}),"\n",(0,s.jsx)(n.p,{children:"In a one-to-one relationship, each record in one model corresponds to exactly one record in another model."}),"\n",(0,s.jsxs)(n.p,{children:["Example: A ",(0,s.jsx)(n.code,{children:"Profile"})," is associated with a single ",(0,s.jsx)(n.code,{children:"User"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class User extends Model\n{\n    public function profile()\n    {\n        return $this->hasOne(Profile::class);\n    }\n}\n\nclass Profile extends Model\n{\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"polymorphic-relationship",children:(0,s.jsx)(n.strong,{children:"Polymorphic Relationship"})}),"\n",(0,s.jsx)(n.p,{children:"In a polymorphic relationship, a model can belong to more than one other model on a single association."}),"\n",(0,s.jsxs)(n.p,{children:["Example: A ",(0,s.jsx)(n.code,{children:"Photo"})," can belong to either a ",(0,s.jsx)(n.code,{children:"Post"})," or a ",(0,s.jsx)(n.code,{children:"User"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class Photo extends Model\n{\n    public function imageable()\n    {\n        return $this->morphTo();\n    }\n}\n\nclass Post extends Model\n{\n    public function photos()\n    {\n        return $this->morphMany(Photo::class, 'imageable');\n    }\n}\n\nclass User extends Model\n{\n    public function photos()\n    {\n        return $this->morphMany(Photo::class, 'imageable');\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-the-relationship",children:"Using the Relationship"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"To attach a photo to a post:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$post = Post::find(1);\n$photo = new Photo(['path' => 'path/to/photo.jpg']);\n$post->photos()->save($photo);\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"To retrieve all photos associated with a post:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$post = Post::find(1);\n$photos = $post->photos;\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>a});var s=o(6540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);