"use strict";(self.webpackChunkdatabases_in_action=self.webpackChunkdatabases_in_action||[]).push([[631],{6946:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>o});var i=t(4848),a=t(8453);const s={sidebar_position:2},l="Data Manipulation Language (DML)",r={id:"Relational-Database-Management-Systems/DML",title:"Data Manipulation Language (DML)",description:"INSERT",source:"@site/docs/Relational-Database-Management-Systems/DML.md",sourceDirName:"Relational-Database-Management-Systems",slug:"/Relational-Database-Management-Systems/DML",permalink:"/databases-in-action/docs/Relational-Database-Management-Systems/DML",draft:!1,unlisted:!1,editUrl:"https://github.com/HMZElidrissi/databases-in-action/blob/main/docs/Relational-Database-Management-Systems/DML.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Data Definition Language (DDL)",permalink:"/databases-in-action/docs/Relational-Database-Management-Systems/DDL"},next:{title:"Querying Data",permalink:"/databases-in-action/docs/Relational-Database-Management-Systems/Querying-Data"}},c={},o=[{value:"INSERT",id:"insert",level:2},{value:"with <code>INSERT INTO</code>",id:"with-insert-into",level:3},{value:"by Executing a SQL script",id:"by-executing-a-sql-script",level:3},{value:"by Importing a CSV file",id:"by-importing-a-csv-file",level:3},{value:"DELETE",id:"delete",level:2},{value:"UPDATE",id:"update",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"data-manipulation-language-dml",children:"Data Manipulation Language (DML)"}),"\n",(0,i.jsx)(n.h2,{id:"insert",children:"INSERT"}),"\n",(0,i.jsxs)(n.h3,{id:"with-insert-into",children:["with ",(0,i.jsx)(n.code,{children:"INSERT INTO"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="With specification of column names"',children:"INSERT INTO Client (ClientNumber, ClientName, birth_date, city)\nVALUES (1, 'Ahmed Ali', '1991-08-03 05:12:00', 'Rabat');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Without specification of column names"',children:"INSERT INTO Client\nVALUES (2, 'Khalid Fathi', '1990-11-13 15:24:00', 'Kenitra');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Inserting multiple rows"',children:"INSERT INTO Client (ClientNumber, ClientName, birth_date, city)\nVALUES (3, 'Karim Othman', '1992-05-23 10:45:00', 'Casablanca'),\n       (4, 'Hassan Jamal', '1993-02-15 20:36:00', 'Tangier');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Inserting a row with a default value (MySQL-specific)"',children:"INSERT INTO Client\nSET ClientNumber = 5, ClientName = 'Omar Youssef', birth_date = '1994-07-30 08:18:00', city = 'Marrakech';\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Inserting a row that may already exist (MySQL)"',children:"INSERT IGNORE INTO Client (ClientNumber, ClientName, birth_date, city)\nVALUES (1, 'Ahmed Ali', '1991-08-03 05:12:00', 'Rabat');\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Inserting a row that may already exist (PostgreSQL)"',children:"INSERT INTO Client (ClientNumber, ClientName, birth_date, city)\nVALUES (1, 'Ahmed Ali', '1991-08-03 05:12:00', 'Rabat')\nON CONFLICT (ClientNumber) DO NOTHING;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Inserting a row from another table"',children:"INSERT INTO Client (ClientNumber, ClientName, birth_date, city)\nSELECT ClientNumber, ClientName, birth_date, city\nFROM Client\nWHERE ClientNumber = 1;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"by-executing-a-sql-script",children:"by Executing a SQL script"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Inserting data from a script (MySQL)"',children:"source /path/to/script.sql;\n\n-- or\n       \n\\. /path/to/script.sql;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Inserting data from a script (PostgreSQL)"',children:"\\i /path/to/script.sql;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"by-importing-a-csv-file",children:"by Importing a CSV file"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Importing data from a CSV file (MySQL)"',children:"LOAD DATA [LOCAL] INFILE '/path/to/file.csv'\nINTO TABLE Client\n[FIELDS TERMINATED BY ',' ENCLOSED BY '\"' ESCAPED BY '\\\\']\n[LINES STARTING BY 'line_starting_by' TERMINATED BY '\\n'];\n[IGNORE number LINES]\n[(column1, column2, ...)];\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"LOCAL"}),": Optional keyword to specify that the file is on the client-side."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FIELDS TERMINATED BY"}),", ",(0,i.jsx)(n.code,{children:"ENCLOSED BY"}),", ",(0,i.jsx)(n.code,{children:"ESCAPED BY"}),": Optional keywords to specify the field, enclosure, and escape characters."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"LINES STARTING BY"}),", ",(0,i.jsx)(n.code,{children:"TERMINATED BY"}),": Optional keywords to specify the line starting and terminating characters."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"IGNORE number LINES"}),": Optional keyword to specify the number of lines to ignore at the beginning of the file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"column1, column2, ..."}),": Optional list of columns to import."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Importing data from a CSV file (PostgreSQL)"',children:"COPY table_name (column1, column2, column3, ...)\n    FROM '/path/to/your/file.csv'\n    WITH (FORMAT csv, HEADER true, DELIMITER ',', QUOTE '\"', ESCAPE '\\\\');\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"table_name"}),": The name of the table you're importing data into."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"(column1, column2, column3, ...)"}),": The columns in the table that correspond to the columns in your CSV file. This part is optional; if omitted, the CSV file must have the same column order as the table."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"'/path/to/your/file.csv'"}),": The full path to the CSV file you want to import."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WITH (FORMAT csv, HEADER true, DELIMITER ',', QUOTE '\"', ESCAPE '\\\\')"}),": Specifies the format of the file and its nuances. Adjust these options according to your CSV file format:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FORMAT csv"}),": Specifies that the file is in CSV format."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HEADER true"}),": Indicates that the first row contains column headers and should be ignored during import."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DELIMITER ','"}),": Specifies the character that separates columns in the file (",(0,i.jsx)(n.code,{children:","})," is the standard CSV delimiter)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"QUOTE '\"'"}),": Indicates the character used to quote data in the file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ESCAPE '\\\\'"}),": Specifies the escape character."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Importing data from a CSV using \\copy command (PostgreSQL)"',children:"\\copy table_name (column1, column2, column3, ...)\n    FROM '/path/to/your/file.csv'\n    WITH (FORMAT csv, HEADER true, DELIMITER ',', QUOTE '\"', ESCAPE '\\\\');\n"})}),"\n",(0,i.jsx)(n.h2,{id:"delete",children:"DELETE"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Deleting all rows"',children:"DELETE FROM Client;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Deleting specific rows"',children:"DELETE FROM Client\nWHERE ClientNumber = 1;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Deleting rows from another table"',children:"DELETE Client\nFROM Client\nJOIN Orders ON Client.ClientNumber = Orders.ClientNumber\nWHERE Orders.OrderNumber = 1;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"update",children:"UPDATE"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Updating all rows"',children:"UPDATE Client\nSET city = 'Rabat';\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Updating specific rows"',children:"UPDATE Client\nSET city = 'Rabat'\nWHERE ClientNumber = 1;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Updating rows from another table"',children:"UPDATE Client\nJOIN Orders ON Client.ClientNumber = Orders.ClientNumber\nSET Client.city = 'Rabat'\nWHERE Orders.OrderNumber = 1;\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var i=t(6540);const a={},s=i.createContext(a);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);