"use strict";(self.webpackChunkdatabases_in_action=self.webpackChunkdatabases_in_action||[]).push([[1876],{338:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var s=a(4848),t=a(8453);const r={sidebar_position:3},i="Querying the Database with Eloquent",o={id:"Laravel-Models/Querying-the-Database-with-Eloquent",title:"Querying the Database with Eloquent",description:"Retrieving Models",source:"@site/docs/Laravel-Models/Querying-the-Database-with-Eloquent.md",sourceDirName:"Laravel-Models",slug:"/Laravel-Models/Querying-the-Database-with-Eloquent",permalink:"/databases-in-action/docs/Laravel-Models/Querying-the-Database-with-Eloquent",draft:!1,unlisted:!1,editUrl:"https://github.com/HMZElidrissi/databases-in-action/blob/main/docs/Laravel-Models/Querying-the-Database-with-Eloquent.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Eloquent Relationships",permalink:"/databases-in-action/docs/Laravel-Models/Eloquent-Relationships"},next:{title:"Query Scopes",permalink:"/databases-in-action/docs/Laravel-Models/Query-Scopes"}},l={},d=[{value:"Retrieving Models",id:"retrieving-models",level:2},{value:"Query Constraints",id:"query-constraints",level:2},{value:"Creating and Updating Models",id:"creating-and-updating-models",level:2},{value:"Deleting Models",id:"deleting-models",level:2},{value:"<strong>Lazy Loading and Eager Loading</strong>",id:"lazy-loading-and-eager-loading",level:2},{value:"Eager loading",id:"eager-loading",level:3},{value:"Lazy loading",id:"lazy-loading",level:3}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"querying-the-database-with-eloquent",children:"Querying the Database with Eloquent"}),"\n",(0,s.jsx)(n.h2,{id:"retrieving-models",children:"Retrieving Models"}),"\n",(0,s.jsxs)(n.p,{children:["To retrieve models from the database using Eloquent, you can use the ",(0,s.jsx)(n.code,{children:"get"})," method on the model class. This method returns a collection of model instances that match the specified query conditions:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$users = User::get();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the ",(0,s.jsx)(n.code,{children:"get"})," method retrieves all user records from the ",(0,s.jsx)(n.code,{children:"users"})," table and returns them as a collection of ",(0,s.jsx)(n.code,{children:"User"})," model instances."]}),"\n",(0,s.jsx)(n.p,{children:"You can also use various query methods to filter and customize the retrieval process."}),"\n",(0,s.jsxs)(n.p,{children:["For example, you can use the ",(0,s.jsx)(n.code,{children:"where"})," method to add conditions to your query:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$admins = User::where('role', 'admin')->get();\n// This query retrieves all user records where the \u2018role\u2019 column is set to \u201cadmin\u201d\n"})}),"\n",(0,s.jsx)(n.h2,{id:"query-constraints",children:"Query Constraints"}),"\n",(0,s.jsx)(n.p,{children:"Eloquent provides a wide range of query constraints to help you retrieve specific data from the database. Some commonly used query constraints include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"where"}),": Adds a basic where clause to the query."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"orWhere"}),': Adds an "or" where clause to the query.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"whereIn"}),": Adds a where in clause to the query."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"whereBetween"}),": Adds a where between clause to the query."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"orderBy"}),": Orders the query results by a specified column."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"limit"}),": Limits the number of records returned by the query."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$users = User::where('role', 'admin')\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0->orWhere('role', 'editor')\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0->orderBy('created_at', 'desc')\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0->limit(10)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0->get();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-and-updating-models",children:"Creating and Updating Models"}),"\n",(0,s.jsxs)(n.p,{children:["To create a new model instance and save it to the database, you can use the ",(0,s.jsx)(n.code,{children:"create"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$user = User::create([\n\xa0\xa0\xa0\xa0'name' => 'John Doe',\n\xa0\xa0\xa0\xa0'email' => 'john@example.com',\n\xa0\xa0\xa0\xa0'password' => bcrypt('password'),\n]);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To update an existing model, you can retrieve it from the database, modify its attributes, and call the ",(0,s.jsx)(n.code,{children:"save"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$user = User::find(1);\n$user->name = 'Jane Smith';\n$user->save();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"deleting-models",children:"Deleting Models"}),"\n",(0,s.jsxs)(n.p,{children:["To delete a model from the database, you can call the ",(0,s.jsx)(n.code,{children:"delete"})," method on the model instance:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$user = User::find(1);\n$user->delete();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"lazy-loading-and-eager-loading",children:(0,s.jsx)(n.strong,{children:"Lazy Loading and Eager Loading"})}),"\n",(0,s.jsx)(n.p,{children:"In Laravel's Eloquent ORM, relationships between database tables are defined using Eloquent models. When querying related data, there are two approaches:"}),"\n",(0,s.jsx)(n.h3,{id:"eager-loading",children:"Eager loading"}),"\n",(0,s.jsxs)(n.p,{children:["Eager loading allows you to retrieve the main model along with its related models in a single query. It uses the ",(0,s.jsx)(n.code,{children:"with()"})," method to specify the relationships to be loaded up front, reducing the number of database queries and improving performance:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Eager loading example\n$users = User::with('posts')->get();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"lazy-loading",children:"Lazy loading"}),"\n",(0,s.jsx)(n.p,{children:"Lazy loading, on the other hand, loads related models only when they are accessed for the first time. It avoids loading unnecessary data but may lead to the N+1 query problem, where additional queries are executed when accessing related data in a loop, causing potential performance issues:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Lazy loading example\n$users = User::all();\nforeach ($users as $user) {\n\xa0\xa0\xa0\xa0$posts = $user->posts; \n// Lazy loading the 'posts' relationship for each user\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["\ud83d\udccc The ",(0,s.jsx)(n.strong,{children:"N+1 query problem"}),' is a common performance issue encountered in relational database systems, particularly in the context of Object-Relational Mapping (ORM) frameworks like Laravel\'s Eloquent ORM. It occurs when an application executes a query to fetch a collection of objects (typically referred to as the "N" query), and then for each object in that collection, it executes an additional query to fetch related data (the "+1 query").']})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var s=a(6540);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);