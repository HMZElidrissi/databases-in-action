"use strict";(self.webpackChunkdatabases_in_action=self.webpackChunkdatabases_in_action||[]).push([[420],{2913:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=t(4848),s=t(8453);const r={sidebar_position:10},o="Procedures",i={id:"Relational-Database-Management-Systems/Procedures",title:"Procedures",description:"Prepared Statements",source:"@site/docs/Relational-Database-Management-Systems/Procedures.md",sourceDirName:"Relational-Database-Management-Systems",slug:"/Relational-Database-Management-Systems/Procedures",permalink:"/databases-in-action/docs/Relational-Database-Management-Systems/Procedures",draft:!1,unlisted:!1,editUrl:"https://github.com/HMZElidrissi/databases-in-action/blob/main/docs/Relational-Database-Management-Systems/Procedures.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Cursors and Triggers",permalink:"/databases-in-action/docs/Relational-Database-Management-Systems/Triggers-and-Cursors"},next:{title:"Transactions",permalink:"/databases-in-action/docs/Relational-Database-Management-Systems/Transactions"}},l={},d=[{value:"Prepared Statements",id:"prepared-statements",level:2},{value:"Stored Procedures",id:"stored-procedures",level:2},{value:"Loops, Conditional Statements and Case Statements",id:"loops-conditional-statements-and-case-statements",level:2},{value:"PL/SQL",id:"plsql",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"procedures",children:"Procedures"}),"\n",(0,a.jsx)(n.h2,{id:"prepared-statements",children:"Prepared Statements"}),"\n",(0,a.jsx)(n.p,{children:"Prepared statements are a feature of database management systems that allow you to define a query template with placeholders for parameters. The database system then compiles the query template and executes it with the provided parameters. This process can improve performance by reducing the overhead of repeatedly parsing and planning the same query with different parameter values."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="Prepared Statement Example (PostgreSQL)"',children:"-- Create a prepared statement\nPREPARE statement_name AS\nSELECT column1, column2\nFROM table_name\nWHERE column3 = $1;\n\n-- Execute the prepared statement with parameters\nEXECUTE statement_name('parameter_value');\n\n-- Deallocate the prepared statement\nDEALLOCATE statement_name;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="Prepared Statement Example (MySQL)"',children:"-- Create a prepared statement\nPREPARE statement_name FROM\n'SELECT column1, column2\nFROM table_name\nWHERE column3 = ?';\n\n-- Execute the prepared statement with parameters\nEXECUTE statement_name USING @parameter_value;\n\n-- Deallocate the prepared statement\nDEALLOCATE PREPARE statement_name;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"stored-procedures",children:"Stored Procedures"}),"\n",(0,a.jsx)(n.p,{children:"Stored procedures are a set of SQL statements that are stored in the database and can be executed on demand. They are typically used to encapsulate complex logic and business rules, making it easier to manage and maintain the database code. Stored procedures can accept input parameters, return output values, and perform a wide range of operations within the database."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="Stored Procedure Example (PostgreSQL)"',children:"-- Create a stored procedure\nCREATE OR REPLACE PROCEDURE procedure_name(parameter1 datatype, parameter2 datatype)\nLANGUAGE SQL\nAS $$\n    SELECT column1, column2\n    FROM table_name\n    WHERE column3 = parameter1\n    AND column4 = parameter2;\n$$;\n\n-- Execute the stored procedure\nCALL procedure_name('parameter_value1', 'parameter_value2');\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CREATE OR REPLACE PROCEDURE"}),": Creates a new stored procedure or replaces an existing one with the same name."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"LANGUAGE SQL"}),": Specifies the language used to define the stored procedure. In this case, it's SQL. Other languages like PL/pgSQL can also be used in PostgreSQL."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AS $$ ... $$"}),": Defines the body of the stored procedure using the SQL code enclosed within the ",(0,a.jsx)(n.code,{children:"$$"})," delimiters."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CALL procedure_name(...)"}),": Executes the stored procedure with the specified input parameters."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="Stored Procedure Example (MySQL)"',children:"-- Create a stored procedure\nDELIMITER //\nCREATE PROCEDURE procedure_name(IN parameter1 datatype, IN parameter2 datatype)\nBEGIN\n    SELECT column1, column2\n    FROM table_name\n    WHERE column3 = parameter1\n    AND column4 = parameter2;\nEND //\nDELIMITER ;\n\n-- Execute the stored procedure\nCALL procedure_name('parameter_value1', 'parameter_value2');\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"DELIMITER //"}),": Changes the statement delimiter to ",(0,a.jsx)(n.code,{children:"//"})," to allow defining the stored procedure body."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CREATE PROCEDURE"}),": Creates a new stored procedure."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"IN parameter1 datatype"}),": Declares input parameters for the stored procedure."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"BEGIN ... END"}),": Defines the body of the stored procedure."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CALL procedure_name(...)"}),": Executes the stored procedure with the specified input parameters."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"DELIMITER ;"}),": Resets the statement delimiter back to ",(0,a.jsx)(n.code,{children:";"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"loops-conditional-statements-and-case-statements",children:"Loops, Conditional Statements and Case Statements"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="Loop Example (PostgreSQL)"',children:"-- Loop using a FOR loop\nFOR i IN 1..5 LOOP\n    -- Loop body\nEND LOOP;\n\n-- Loop using a WHILE loop\nWHILE condition LOOP\n    -- Loop body\nEND LOOP;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="Loop Example (MySQL)"',children:"-- Loop using a WHILE loop\nWHILE condition DO\n    -- Loop body\nEND WHILE;\n\n-- Loop using a REPEAT loop\nREPEAT\n    -- Loop body\nUNTIL condition END REPEAT;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="Conditional Statement Example (PostgreSQL)"',children:"IF condition THEN\n    -- Code block\nELSIF condition THEN\n    -- Code block\nELSE\n    -- Code block\nEND IF;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="Conditional Statement Example (MySQL)"',children:"IF condition THEN\n    -- Code block\nELSEIF condition THEN\n    -- Code block\nELSE\n    -- Code block\nEND IF;\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="Case Statement Example"',children:"CASE\n    WHEN condition1 THEN result1\n    WHEN condition2 THEN result2\n    ELSE result3\nEND;\n"})}),"\n",(0,a.jsx)(n.admonition,{title:"LEAVE and ITERATE Statements",type:"info",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"LEAVE"}),": Exits the current loop."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ITERATE"}),": Skips the remaining code in the current loop iteration and continues with the next iteration."]}),"\n",(0,a.jsx)(n.li,{children:"These statements are commonly used in loops to control the flow of execution."}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"LEAVE"})," and ",(0,a.jsx)(n.code,{children:"ITERATE"})," are supported in both PostgreSQL and MySQL."]}),"\n"]})}),"\n",(0,a.jsx)(n.h2,{id:"plsql",children:"PL/SQL"}),"\n",(0,a.jsx)(n.p,{children:"PL/SQL (Procedural Language/Structured Query Language) is Oracle Corporation's procedural extension for SQL. It allows you to write procedural code that can be executed in the Oracle database. PL/SQL supports variables, loops, conditional statements, error handling, and other programming constructs, making it a powerful tool for developing complex database applications."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",metastring:'title="PL/SQL Example"',children:"-- Create a PL/SQL block\nDECLARE\n    variable1 datatype;\n    variable2 datatype;\nBEGIN\n    SELECT column1 INTO variable1\n    FROM table_name\n    WHERE column2 = 'value';\n\n    variable2 := variable1 * 2;\n\n    DBMS_OUTPUT.PUT_LINE('Result: ' || variable2);\nEND;\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"DECLARE ... BEGIN ... END;"}),": Defines a PL/SQL block that declares variables and contains the procedural code."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"SELECT ... INTO ..."}),": Retrieves a single value from the database and assigns it to a variable."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"variable2 := variable1 * 2;"}),": Performs a calculation and assigns the result to a variable."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"DBMS_OUTPUT.PUT_LINE(...)"}),": Outputs a message to the console."]}),"\n",(0,a.jsx)(n.li,{children:"PL/SQL blocks can be executed using tools like SQL*Plus, SQL Developer, or within stored procedures and functions."}),"\n",(0,a.jsx)(n.li,{children:"PL/SQL also supports exception handling, cursors, triggers, and other advanced features for developing complex database applications."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(6540);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);