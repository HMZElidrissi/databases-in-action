"use strict";(self.webpackChunkdatabases_in_action=self.webpackChunkdatabases_in_action||[]).push([[233],{4992:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=o(4848),r=o(8453);const s={sidebar_position:5},i="Laravel Routing",l={id:"Laravel-Routing",title:"Laravel Routing",description:"Routing in Laravel refers to defining how incoming HTTP requests should be handled. Routes define the URLs and map them to specific controller actions. For example, you can define a route that maps the /users URL to a UserController's index action. Routes provide a clean and expressive way to handle different HTTP methods (GET, POST, PUT, and DELETE) and parameters.",source:"@site/docs/Laravel-Routing.md",sourceDirName:".",slug:"/Laravel-Routing",permalink:"/databases-in-action/docs/Laravel-Routing",draft:!1,unlisted:!1,editUrl:"https://github.com/HMZElidrissi/databases-in-action/blob/main/docs/Laravel-Routing.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Database Migrations",permalink:"/databases-in-action/docs/Laravel-Models/Database-Migrations"},next:{title:"Laravel Controllers",permalink:"/databases-in-action/docs/Laravel-Controllers"}},a={},d=[{value:"Static Routing",id:"static-routing",level:2},{value:"Dynamic Routing",id:"dynamic-routing",level:2},{value:"Implementing Static Routing",id:"implementing-static-routing",level:2},{value:"Implementing Dynamic Routing",id:"implementing-dynamic-routing",level:2},{value:"Routing to a Single Controller Method",id:"routing-to-a-single-controller-method",level:2},{value:"Route Parameters",id:"route-parameters",level:2},{value:"Route Naming",id:"route-naming",level:2},{value:"Route Groups",id:"route-groups",level:2},{value:"<strong>CRUD Routing</strong>",id:"crud-routing",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"laravel-routing",children:"Laravel Routing"}),"\n",(0,t.jsxs)(n.p,{children:["Routing in Laravel refers to defining how incoming HTTP requests should be handled. Routes define the URLs and map them to specific controller actions. For example, you can define a route that maps the ",(0,t.jsx)(n.code,{children:"/users"})," URL to a UserController's index action. Routes provide a clean and expressive way to handle different HTTP methods (",(0,t.jsx)(n.code,{children:"GET"}),", ",(0,t.jsx)(n.code,{children:"POST"}),", ",(0,t.jsx)(n.code,{children:"PUT"}),", and ",(0,t.jsx)(n.code,{children:"DELETE"}),") and parameters."]}),"\n",(0,t.jsx)(n.p,{children:"Here's an illustration for reference:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"Route::get('/users', 'UserController@index');\n// OR\nRoute::get('/users', [UserController::class, 'index']);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"static-routing",children:"Static Routing"}),"\n",(0,t.jsx)(n.p,{children:"Static routing in Laravel is a direct mapping of URLs to specific controller methods. For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"Route::get('/home', 'HomeController@index');\nRoute::get('/about', 'AboutController@index');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:"/home"})," is linked to the ",(0,t.jsx)(n.code,{children:"index"})," method of ",(0,t.jsx)(n.code,{children:"HomeController"}),", and ",(0,t.jsx)(n.code,{children:"/about"})," to ",(0,t.jsx)(n.code,{children:"AboutController"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"dynamic-routing",children:"Dynamic Routing"}),"\n",(0,t.jsx)(n.p,{children:"Dynamic routing uses placeholders in URLs to handle variable data, like user IDs in a profile page. An example is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"Route::get('/profile/{user_id}', 'ProfileController@show');\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"{user_id}"})," dynamically captures a value from the URL and passes it to ",(0,t.jsx)(n.code,{children:"ProfileController"}),"'s ",(0,t.jsx)(n.code,{children:"show"})," method."]}),"\n",(0,t.jsx)(n.h2,{id:"implementing-static-routing",children:"Implementing Static Routing"}),"\n",(0,t.jsx)(n.p,{children:"To set up static routing:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Define routes in ",(0,t.jsx)(n.code,{children:"routes/web.php"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"Route::get('/home', 'HomeController@index');\nRoute::get('/about', 'AboutController@index');\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Routes can also return views directly or use callback functions for simpler operations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"Route::get('/welcome', function () {\n    return view('welcome');\n});\n"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implementing-dynamic-routing",children:"Implementing Dynamic Routing"}),"\n",(0,t.jsx)(n.p,{children:"Dynamic routing setup involves:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Defining a dynamic route in ",(0,t.jsx)(n.code,{children:"routes/web.php"})," with placeholders:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"Route::get('/profile/{user_id}', 'ProfileController@show');\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Creating a corresponding controller method to handle the dynamic data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"public function show($user_id) {\n    // Logic to display user profile using $user_id\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Both routing types in Laravel facilitate the efficient mapping of URLs to controller methods. Static routing is ideal for fixed URLs, while dynamic routing excels in handling variable URL components."}),"\n",(0,t.jsx)(n.h2,{id:"routing-to-a-single-controller-method",children:"Routing to a Single Controller Method"}),"\n",(0,t.jsx)(n.p,{children:"A route can be set up to handle all requests through a single controller method:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"Route::any('/single-method', 'SingleMethodController');\n"})}),"\n",(0,t.jsx)(n.h2,{id:"route-parameters",children:"Route Parameters"}),"\n",(0,t.jsx)(n.p,{children:"Routes can accept parameters, which are passed to controller methods:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"Route::get('/user/{id}', 'UserController@show');\n"})}),"\n",(0,t.jsx)(n.h2,{id:"route-naming",children:"Route Naming"}),"\n",(0,t.jsx)(n.p,{children:"Naming routes simplify referencing them in redirects and URL generation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"Route::get('/user/profile', 'UserProfileController@show')->name('profile');\n"})}),"\n",(0,t.jsx)(n.h2,{id:"route-groups",children:"Route Groups"}),"\n",(0,t.jsx)(n.p,{children:"Grouping routes under a common path or middleware simplifies route management:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"Route::middleware(['auth'])->group(function () {\n    Route::get('/dashboard', 'DashboardController@index');\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"crud-routing",children:(0,t.jsx)(n.strong,{children:"CRUD Routing"})}),"\n",(0,t.jsx)(n.p,{children:"Let's now create CRUD (Create, Read, Update, Delete) routes for managing blog posts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"// routes/web.php\n\nuse App\\\\Http\\\\Controllers\\\\BlogController;\n\n// Show the list of blog posts\nRoute::get('/posts', [BlogController::class, 'index']);\n\n// Show the form for creating a new blog post\nRoute::get('/posts/create', [BlogController::class, 'create']);\n\n// Store a newly created blog post\nRoute::post('/posts', [BlogController::class, 'store']);\n\n// Show a specific blog post\nRoute::get('/posts/{post}', [BlogController::class, 'show']);\n\n// Show the form for editing a blog post\nRoute::get('/posts/{post}/edit', [BlogController::class, 'edit']);\n\n// Update a specific blog post\nRoute::put('/posts/{post}', [BlogController::class, 'update']);\n\n// Delete a specific blog post\nRoute::delete('/posts/{post}', [BlogController::class, 'destroy'])\n"})}),"\n",(0,t.jsx)(n.p,{children:"In the preceding example, we constructed routes for complete CRUD actions on blog posts. These pathways correspond to the actions listed in the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"index"}),": This function displays a list of all blog posts."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"create"}),": Display a form for creating a new blog post."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"store"}),": Save the freshly created blog post to the database."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"show"}),": Display a certain blog post."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"edit"}),": Show a form for editing an existing blog entry."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"update"}),": In the database, update an existing blog post."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"destroy"}),": Removes a particular blog post from the database."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var t=o(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);